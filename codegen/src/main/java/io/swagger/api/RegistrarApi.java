/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.46).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Registrar;
import io.swagger.model.Student;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-10-21T05:45:26.553786594Z[GMT]")
@Validated
public interface RegistrarApi {

    @Operation(summary = "Remove Student from Course", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful response"),
        
        @ApiResponse(responseCode = "400", description = "Course not found in registrar"),
        
        @ApiResponse(responseCode = "422", description = "Unprocessable Entity") })
    @RequestMapping(value = "/registrar",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> registrarDelete(@NotNull @Parameter(in = ParameterIn.QUERY, description = "Course Number" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "courseNumber", required = true) Integer courseNumber, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Student ID" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "id", required = true) Integer id);


    @Operation(summary = "Get Students in Course", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful response", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Student.class)))),
        
        @ApiResponse(responseCode = "400", description = "Course not found in registrar") })
    @RequestMapping(value = "/registrar",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Student>> registrarGet(@NotNull @Parameter(in = ParameterIn.QUERY, description = "Course Number" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "courseNumber", required = true) Integer courseNumber);


    @Operation(summary = "Add Student to Course", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Registrar.class))),
        
        @ApiResponse(responseCode = "404", description = "Course not found in registrar"),
        
        @ApiResponse(responseCode = "422", description = "Unprocessable Entity") })
    @RequestMapping(value = "/registrar",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Registrar> registrarPut(@NotNull @Parameter(in = ParameterIn.QUERY, description = "Course Number" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "courseNumber", required = true) Integer courseNumber, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Student ID" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "id", required = true) Integer id);

}

